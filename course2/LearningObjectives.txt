Learning Objectives

Week 1:
Basic Data Structures

Alexander S. Kulikov
Michael Levin
Daniel M Kane
Neil Rhodes

In this module, you will learn about the basic data structures used throughout the rest of this course. We start this module by looking in detail at the fundamental building blocks: arrays and linked lists. From there, we build up two important data structures: stacks and queues. Next, we look at trees: examples of how they¡¯re used in Computer Science, how they¡¯re implemented, and the various ways they can be traversed. Once you¡¯ve completed this module, you will be able to implement any of these data structures, as well as have a solid understanding of the costs of the operations, as well as the tradeoffs involved in using each data structure.

Learning Objectives:
List the basic data structures
Analyze operations with data structures
Choose appropriate basic data structure for a task at hand
Apply basic data structures in programming challenges
Develop a program that simulates network packet processing
Describe how dynamic arrays work
Calculate amortized running time of operations
List the methods for amortized analysis

References

See the chapter 10.1 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.

See these visualizations: array-based stack, list-based stack, array-based queue, list-based queue.

See the chapter 10.1 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.

See these visualizations: array-based stack, list-based stack, array-based queue, list-based queue

See the chapter 10.4 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.



week2:
Dynamic Arrays and Amortized Analysis

In this module, we discuss Dynamic Arrays: a way of using arrays when it is unknown ahead-of-time how many elements will be needed. Here, we also discuss amortized analysis: a method of determining the amortized cost of an operation over a sequence of operations. Amortized analysis is very often used to analyse performance of algorithms when the straightforward analysis produces unsatisfactory results, but amortized analysis helps to show that the algorithm is actually efficient. It is used both for Dynamic Arrays analysis and will also be used in the end of this course to analyze Splay trees.

Learning Objectives:
Describe how dynamic arrays work
Calculate amortized running time of operations
List the methods for amortized analysis

See the chapter 17 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.

Additional Video

This external video (https://www.youtube.com/watch?v=U5XKyIVy2Vc) may be useful to give another perspective on amortized analysis in general, and the banker's method in particular.


week3:
Priority Queues and Disjoint Sets

We start this module by considering priority queues which are used to efficiently schedule jobs, either in the context of a computer operating system or in real life, to sort huge files, which is the most important building block for any Big Data processing algorithm, and to efficiently compute shortest paths in graphs, which is a topic we will cover in our next course. For this reason, priority queues have built-in implementations in many programming languages, including C++, Java, and Python. We will see that these implementations are based on a beautiful idea of storing a complete binary tree in an array that allows to implement all priority queue methods in just few lines of code. We will then switch to disjoint sets data structure that is used, for example, in dynamic graph connectivity and image processing. We will see again how simple and natural ideas lead to an implementation that is both easy to code and very efficient. By completing this module, you will be able to implement both these data structures efficiently from scratch.

Learning Objectives:
Describe how heaps and priority queues work
Describe how disjoint set union data structure works
Analyze the running time of operations with heaps
List the heuristics that speedup disjoint set union
Apply priority queues to schedule jobs on processors
Apply disjoint set union to merge tables in a database

See the chapter 6 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.

References

See the chapter 1.5.1 in [DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.

See the chapters 11.1 and 11.2 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.

References

See the chapter 1.5 in [DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.

See the chapter 11.3 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald
L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press
and McGraw-Hill. 2009.


References

https://en.wikipedia.org/wiki/Distributed_hash_table

http://stackoverflow.com/questions/144360/simple-basic-explanation-of-a-distributed-hash-table-dht

https://www.cs.cmu.edu/~dga/15-744/S07/lectures/16-dht.pdf

https://en.wikipedia.org/wiki/Consistent_hashing

WEEK4:
Hash Tables

In this module you will learn about very powerful and widely used technique called hashing. Its applications include implementation of programming languages, file systems, pattern search, distributed key-value storage and many more. You will learn how to implement data structures to store and modify sets of objects and mappings from one type of objects to another one. You will see that naive implementations either consume huge amount of memory or are slow, and then you will learn to implement hash tables that use linear memory and work in O(1) on average! In the end, you will learn how hash functions are used in modern disrtibuted systems and how they are used to optimize storage of services like Dropbox, Google Drive and Yandex Disk!

Learning Objectives

List applications of hashing
Apply direct addressing to retrieve names by phone numbers
Develop a hash table based on chaining scheme
Apply hashing to find patterns in text
Describe how Dropbox, Google Drive and Yandex Disk save space
Describe the principles on which distributed hash tables are built

binary trees:
References

See the chapter 12 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.

AVL trees:

References
See the chapters 5.11.1, 5.11.2 here(http://www.cs.yale.edu/homes/aspnes/classes/223/notes.pdf).

https://en.wikipedia.org/wiki/AVL_tree

See this visualization(https://www.cs.usfca.edu/~galles/visualization/AVLtree.html). Play with this AVL tree by adding and deleting elements to see how it manages to keep being balanced.


applicatoins:
References

See the chapters 14.1, 14.2 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.

Splay trees


References

See the chapter 5.11.6 here(http://www.cs.yale.edu/homes/aspnes/classes/223/notes.pdf).

Also see this
visualization(http://www.cs.usfca.edu/~galles/visualization/SplayTree.html).
Play with it by adding and erasing keys from it, and see how it can be
unbalanced, in contrast with AVL tree(http://www.cs.usfca.edu/~galles/visualization/AVLtree.html), but pulls the keys it works with to the top.

Also see this answer(https://stackoverflow.com/questions/7467079/difference-between-avl-trees-and-splay-trees) about comparison of AVL trees and Splay trees.

Also see the original paper on Splay trees.


Binary Search Trees
In this module we study binary search trees, which are a data structure for doing searches on dynamically changing ordered sets. You will learn about many of the difficulties in accomplishing this task and the ways in which we can overcome them. In order to do this you will need to learn the basic structure of binary search trees, how to insert and delete without destroying this structure, and how to ensure that the tree remains balanced.

Learning Objectives

Describe how balanced binary search trees work
Analyze the running time of operations with binary search trees
List the capabilities of binary search trees
Compare balanced binary search trees with arrays and lists


Binary Search Trees 2

In this module we continue studying binary search trees. We study a few non-trivial applications. We then study the new kind of balanced search trees - Splay Trees. They adapt to the queries dynamically and are optimal in many ways.

Learning Objectives

Describe how to implement advanced operations using balanced binary search trees
	Describe how splay trees work
Analyze the running time of operations with splay trees
Apply amortized analysis to splay trees
Apply binary search trees in programming challenges
Develop a balanced binary search tree

References

See the chapters 14.1, 14.2 in [CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein. Introduction to Algorithms (3rd Edition). MIT Press and McGraw-Hill. 2009.




