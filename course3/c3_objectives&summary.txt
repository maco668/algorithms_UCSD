WEEK1:

Decomposition of Graphs 1
Graphs arise in various real-world situations as there are road networks, computer networks and, most recently, social networks! If you're looking for the fastest time to get to work, cheapest way to connect set of computers into a network or efficient algorithm to automatically find communities and opinion leaders hot in Facebook, you're going to work with graphs and algorithms on graphs. In this module, you will learn ways to represent a graph as well as basic algorithms for decomposing graphs into parts. In the programming assignment of this module, you will apply the algorithms that you¡¯ve learned to implement efficient programs for exploring mazes, analyzing Computer Science curriculum, and analyzing road networks. In the first week of the module, we focus on undirected graphs.

Learning Objectives

Explain what a graph is
Create a program for exploring mazes

Reading

Section 3.1 in [DPV]

If you find this lesson difficult to follow

Section on graph representation (https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs) at Algorithms class by Tom Cormen and Devin Balkcom at Khan Academy

References

[DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.

Reading

Section 3.2 in [DPV]

Visualizations

Depth-first search (http://www.cs.usfca.edu/~galles/visualization/DFS.html) by David Galles

References

[DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.


WEEK2
Decomposition of Graphs 2
This week we continue to study graph decomposition algorithms, but now for directed graphs.

Learning Objectives

Explain what a directed graph is
Explain what a topological order is
Create a program for analyzing a CS curriculum

Reading

Section 3.3 and 3.4 in [DPV]

Visualizations

Topological sort
(http://www.cs.usfca.edu/~galles/visualization/TopoSortDFS.html) using depth first search by David Galles
Topological sort using indegree array
(http://www.cs.usfca.edu/~galles/visualization/TopoSortIndegree.html) by David Galles
Strongly connected components
(http://www.cs.usfca.edu/~galles/visualization/ConnectedComponent.html) by David Galles
References

[DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.

WEEK3
Paths in Graphs 1

n this module you will study algorithms for finding Shortest Paths in Graphs. These algorithms have lots of applications. When you launch a navigation app on your smartphone like Google Maps or Yandex.Navi, it uses these algorithms to find you the fastest route from work to home, from home to school, etc. When you search for airplane tickets, these algorithms are used to find a route with the minimum number of plane changes. Unexpectedly, these algorithms can also be used to determine the optimal way to do currency exchange, sometimes allowing to earh huge profit! We will cover all these applications, and you will learn Breadth-First Search, Dijkstra's Algorithm and Bellman-Ford Algorithm. These algorithms are efficient and lay the foundation for even more efficient algorithms which you will learn and implement in the Shortest Paths Capstone Project to find best routes on real maps of cities and countries, find distances between people in Social Networks. In the end you will be able to find Shortest Paths efficiently in any Graph. This week we will study Breadth-First Search algorithm.

Learning Objectives

Explain what a shortest path is
Describe algorithms for computing shortest paths in undirected graphs
Create a program for finding an optimal flight


If you find this lesson difficult to follow

Section on breadth-first search at Algorithms class by Tom Cormen and Devin Balkcom at Khan Academy

Visualizations

Breadth-first search by David Galles
References

[DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.

WEEK4
Paths in Graphs 2
This week we continue to study Shortest Paths in Graphs. You will learn Dijkstra's Algorithm which can be applied to find the shortest route home from work. You will also learn Bellman-Ford's algorithm which can unexpectedly be applied to choose the optimal way of exchanging currencies. By the end you will be able to find shortest paths efficiently in any Graph.

Learning Objectives

Explain algorithms for finding shortest paths in weighted graphs
Create a program for finding a cheapest flight
Create a program for detecting anomalies in currency exchange rates


Reading

Sections 4.3 and 4.4 in [DPV]

Visualizations

Dijkstra'a algorithm by David Galles

References

[DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.


Reading

Sections 4.3 and 4.4 in [DPV]

Visualizations

Dijkstra'a algorithm by David Galles

References

[DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.



WEEK5
Minimum Spanning Trees

In this module, we study the minimum spanning tree problem. We will cover two elegant greedy algorithms for this problem: the first one is due to Kruskal and uses the disjoint sets data structure, the second one is due to Prim and uses the priority queue data structure. In the programming assignment for this module you will be computing an optimal way of building roads between cities and an optimal way of partitioning a given set of objects into clusters (a fundamental problem in data mining).


Learning Objectives

Explain what a spanning tree is
Describe algorithms for computing minimum spanning trees
Create an efficient program for clustering

Reading

Section 5.1 in [DPV]

Visualizations

Kruskal's algorithm by David Galles

References

[DPV] Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani. Algorithms (1st Edition). McGraw-Hill Higher Education. 2008.


WEEK6
Advanced Shortest Paths Project (Optional)

Learning Objectives

Develop an algorithm to find distances in the graphs of social networks such as Facebook and internet graphs much faster than with the classical approaches
Develop an algorithm to find distances in the real road networks faster
Develop Bidirectional Dijkstra, A* (A-star) and Contraction Hierarchies algorithms
Develop a solution of the central problem of delivery companies - delivery truck route optimization on real-world road network
Develop an algorithm to find distances in the real-world road networks thousands of times faster than with the classical approaches

Download the slides:

19_advanced_shortest_paths_1_bidirectional_dijkstra.pdf
Note that there are additional slides with pseudocode as compared to the slides in the video lecture.

References

See some visualizations here(https://www.youtube.com/watch?v=DINCL5cd_w0).



References

A-star search algorithm (https://en.wikipedia.org/wiki/A*_search_algorithm).

The visualization (https://www.youtube.com/watch?v=DINCL5cd_w0) that we suggested in the previous lesson also shows A-star algorithm.


Download the slides here:

19_advanced_shortest_paths_3_contraction_hierarchies.pdf
References

See a review of advanced shortest paths algorithms including Contraction Hierarchies here.

See the original paper (http://algo2.iti.kit.edu/schultes/hwy/contract.pdf) on Contraction Hierarchies by Robert Geisberger, Peter Sanders, Dominik Schultes, and Daniel Delling.

Read about practical implementation of Contraction Hierarchies and comparisons
of different approaches and heuristics in this Microsoft Research paper
(https://www.microsoft.com/en-us/research/wp-content/uploads/2010/12/HL-TR.pdf) by Ittai Abraham, Daniel Delling, Andrew Goldberg and Renato Werneck.

Download the real road network graphs from
here(http://www.dis.uniroma1.it/challenge9/download.shtml) to play with them
and apply your implementation of Contraction Hierarchies, measure the time,
compare with other algorithms. Download different real-world graphs from
here(http://dimacs.rutgers.edu/Challenges/).
