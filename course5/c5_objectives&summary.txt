WEEK1

Flows in Networks

Network flows show up in many real world situations in which a good needs to be transported across a network with limited capacity. You can see it when shipping goods across highways and routing packets across the internet. In this unit, we will discuss the mathematical underpinnings of network flows and some important flow algorithms. We will also give some surprising examples on seemingly unrelated problems that can be solved with our knowledge of network flows.

Learning Objectives

Give examples of problems that can be stated in terms of flow problems.
Design algorithms to compute maximum flows.
Apply flow algorithms to other problems.
Interpret the maxflow-mincut theorem.
Build the residual graph associated to a flow in a network.
Describe how a residual network relates to ways that flow can be added.

Reading

Sections 7.1¨C7.3 in [DPV], Chapter 7 in [KT], Chapter 26 in [CLRS].

[DPV] Sanjoy Dasgupta, Christos H. Papadimitriou, and Umesh V. Vazirani. Algorithms. McGraw-Hill, 2008.

[KT] Jon M. Kleinberg and Eva Tardos. Algorithm design. Addison-Wesley, 2006.

[CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms (3. ed.). MIT Press, 2009.

WEEK2

Linear Programming

Linear programming is a very powerful algorithmic tool. Essentially, a linear programming problem asks you to optimize a linear function of real variables constrained by some system of linear inequalities. This is an extremely versatile framework that immediately generalizes flow problems, but can also be used to discuss a wide variety of other problems from optimizing production procedures to finding the cheapest way to attain a healthy diet. Surprisingly, this very general framework admits efficient algorithms. In this unit, we will discuss some of the importance of linear programming problems along with some of the tools used to solve them.

Learning Objectives

Generate examples of problems that can be formulated as linear programs.
Interpret linear programming duality in the context of various linear programs.
Solve systems of linear equations.
Compute optimal solutions to linear programs.
Illustrate convex polytopes.

Reading

Chapter 7 in [DPV], Chapter 29 in [CLRS].

[DPV] Sanjoy Dasgupta, Christos H. Papadimitriou, and Umesh V. Vazirani. Algorithms. McGraw-Hill, 2008.

[CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms (3. ed.). MIT Press, 2009.

WEEK3

NP-complete Problems

Although many of the algorithms you've learned so far are applied in practice a lot, it turns out that the world is dominated by real-world problems without a known provably efficient algorithm. Many of these problems can be reduced to one of the classical problems called NP-complete problems which either cannot be solved by a polynomial algorithm or solving any one of them would win you a million dollars (see Millenium Prize Problems) and eternal worldwide fame for solving the main problem of computer science called P vs NP. It's good to know this before trying to solve a problem before the tomorrow's deadline :) Although these problems are very unlikely to be solvable efficiently in the nearest future, people always come up with various workarounds. In this module you will study the classical NP-complete problems and the reductions between them. You will also practice solving large instances of some of these problems despite their hardness using very efficient specialized software based on tons of research in the area of NP-complete problems.

Learning Objectives

Give_examples of NP-complete problems
Interpret the famous P versus NP open problem
Develop a program for assigning frequencies to the cells of a GSM network
Develop a program for determining whether there is a way to allocate advertising budget given a set of constraints

Reading

Chapter 8 in [DPV], Chapter 8 in [KT], Chapter 34 in [CLRS].

[DPV] Sanjoy Dasgupta, Christos H. Papadimitriou, and Umesh V. Vazirani. Algorithms. McGraw-Hill, 2008.

[KT] Jon M. Kleinberg and Eva Tardos. Algorithm design. Addison-Wesley, 2006.

[CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms (3. ed.). MIT Press, 2009.

Sudoku Solver

sudokusolver.py

WEEK4

Coping with NP-completeness

After the previous module you might be sad: you've just went through 5 courses in Algorithms only to learn that they are not suitable for most real-world problems. However, don't give up yet! People are creative, and they need to solve these problems anyway, so in practice there are often ways to cope with an NP-complete problem at hand. We first show that some special cases on NP-complete problems can, in fact, be solved in polynomial time. We then consider exact algorithms that find a solution much faster than the brute force algorithm. We conclude with approximation algorithms that work in polynomial time and find a solution that is close to being optimal.

Learning Objectives

Describe various approaches to solve NP-complete problems is practice
Develop a program for designing a part of integrated circuit
Develop a program for computing the optimal route for a school bus

Reading

Chapter 9 in [DPV], Chapter 10 in [KT], Chapter 35 in [CLRS].

[DPV] Sanjoy Dasgupta, Christos H. Papadimitriou, and Umesh V. Vazirani. Algorithms. McGraw-Hill, 2008.

[KT] Jon M. Kleinberg and Eva Tardos. Algorithm design. Addison-Wesley, 2006.

[CLRS] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms (3. ed.). MIT Press, 2009.

WEEK5

Streaming Algorithms (Optional)

In most previous lectures we were interested in designing algorithms with fast (e.g. small polynomial) runtime, and assumed that the algorithm has random access to its input, which is loaded into memory. In many modern applications in big data analysis, however, the input is so large that it cannot be stored in memory. Instead, the input is presented as a stream of updates, which the algorithm scans while maintaining a small summary of the stream seen so far. This is precisely the setting of the streaming model of computation, which we study in this lecture. The streaming model is well-suited for designing and reasoning about small space algorithms. It has received a lot of attention in the literature, and several powerful algorithmic primitives for computing basic stream statistics in this model have been designed, several of them impacting the practice of big data analysis. In this lecture we will see one such algorithm (CountSketch), a small space algorithm for finding the top k most frequent items in a data stream.

Learning Objectives

Describe various approaches for finding top most frequent items in a data stream
Practice using Markov and Chebyshev inequalities
Analyze space complexity of streaming algorithms


